;;; 
;;; Соболев
;;; Задание 3
;;; Определить функционал (APL-APPLY f x)
;;; f1 x1, f2 x2, ..., fn xn
(defun Apl_Apply (func lst)
  (cond ((null func) nil)
    ((null lst) nil)
    (t (cons (funcall (car func) (car lst)) (Apl_Apply (cdr func) (cdr lst))))))
;;;
(Apl_Apply '(car cdr length) '((1 2 3) (1 2 3) (1 2 3 4 5 6 7)))
;;; (1 (2 3) 7)
;;;
;;; ---------------------------------------------------------------------------------
;;;
;;; Соболев
;;; Задание 5
;;; Определите функциональный предикат (НЕКОТОРЫЙ пред список), который истенен,
;;; когда предикат пред истинен хотя бы для одного элемента списка список.
;;;
(defun Некоторый (func lst)
   (not (null (mapcan #'(lambda (x) (if (funcall func x) (list t) nil) ) lst))))
;;;
(Некоторый 'evenp '(1 2 3 5 7))
;;; T
(Некоторый 'evenp '(1 3 5 7))
;;; NIL
(Некоторый (lambda (x) (not (= x 5))) '(5 2 9 7 1 0))
;;; T
(Некоторый (lambda (x) (not (= x 7))) '(7 7 7))
;;; NIL
;;;
;;; ---------------------------------------------------------------------------------
;;;
;;; Соболев
;;; Задание 13
;;; Определить функцию, возвращающую свое значение
;;;
(defun вызов (&rest args)
    (symbol-function 'вызов))
;;;
(print (вызов))
;;; #<FUNCTION ВЫЗОВ (&REST ARGS) (DECLARE (SYSTEM::IN-DEFUN ВЫЗОВ))
;;;  (BLOCK ВЫЗОВ (SYMBOL-FUNCTION 'ВЫЗОВ))> 
(print (вызов 'x))
;;; #<FUNCTION ВЫЗОВ (&REST ARGS) (DECLARE (SYSTEM::IN-DEFUN ВЫЗОВ))
;;;  (BLOCK ВЫЗОВ (SYMBOL-FUNCTION 'ВЫЗОВ))>
(print (вызов 1 2 3 4 5 6 7 8 9))
;;; #<FUNCTION ВЫЗОВ (&REST ARGS) (DECLARE (SYSTEM::IN-DEFUN ВЫЗОВ))
;;;  (BLOCK ВЫЗОВ (SYMBOL-FUNCTION 'ВЫЗОВ))>
;;;
;;; ---------------------------------------------------------------------------------
;;;
;;; Соболев
;;; Задание 1
;;; Определите FUNCALL через функционал APPLY
;;;
(defun my_funcall (x &rest lst) 
  (apply x lst))
;;;
;;; (my_funcall #'+ 1 2 3 4 5)
;;; 15
;;; (my_funcall #'+ )
;;; 0
;;; (my_funcall #'list '(a b c d e) '(1 2 3 4 5))
;;; ((A B C D E) (1 2 3 4 5))
;;;
;;; ---------------------------------------------------------------------------------
;;; 
;;; Соболев
;;; Задание 7
;;; Определите УДАЛИТЬ-ЕСЛИ-НЕ, удаляющий из списка все элементы,
;;; которые не обладают свойством.
;;;
(defun УДАЛИТЬ-ЕСЛИ-НЕ (pred lst)
  (mapcan #'(lambda (a) (if (funcall pred a) (list a) nil)) lst)) 
;;;
;;; (УДАЛИТЬ-ЕСЛИ-НЕ #'evenp '(1 2 3 4 5 6 7))
;;; (2 4 6)
;;; (УДАЛИТЬ-ЕСЛИ-НЕ #'oddp '(1 2 3 4 5 6 7))
;;; (1 3 5 7)
;;;
;;; ---------------------------------------------------------------------------------
;;; 
;;; Соболев
;;; Задание 11
;;; Определите функционал МНОГОФУН 
;;; (МНОГОФУН '(f g ... h) x) <=> (LIST (f x) (g x) ... (h x)).
;;;
(defun МНОГОФУН (func x)
  (mapcar #'(lambda (v) (funcall v x)) func))
;;;
;;; (МНОГОФУН '(listp car cdr length) '(1 2 3 4 5 6 7))
;;; (T 1 (2 3 4 5 6 7) 7)
;;; (МНОГОФУН '(sin cos) 0)
;;; (0.0 1.0)
;;;
;;; ---------------------------------------------------------------------------------
