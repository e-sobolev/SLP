;;; Задание 9
;;; Соболев
;;; Разбить список на два списка: чётные и нечётные элементы
(defun чет-нечет (lst)
  (list (remove-if #'oddp lst) (remove-if #'evenp lst)))
;;;
;;; (чет-нечет '(1 2 3 4 5 6 7 8 9))
;;; ((2 4 6 8) (1 3 5 7 9))
;;; (чет-нечет '(4 61 95 22 64 93 1 4 7 76 46 58))
;;; ((4 22 64 4 76 46 58) (61 95 93 1 7))
;;;	-------------------------------------------------------------
;;; Задание 15
;;; Соболев
;;; Найти скалярное произведение векторов
(defun произв (x y)
  (cond ((and (null x) (null y)) 0)
        ((or (null x) (null y)) (print "список не равен") 0)
        (t (+ (* (car x) (car y)) (произв (cdr x) (cdr y))))))
;;;
;;; (произв '(1 2 3) '(1 2 3))
;;; 14
;;; (произв '(1 2 3 4 5) '(1 2 3))
;;; список не равен
;;; (произв '(1 2 3) '(1 2 3 4 5))
;;; список не равен
;;;	-------------------------------------------------------------
;;; Задание 27
;;; Соболев
;;; Определить функцию, которая чередует элементы списков
(defun чередование (l1 l2)
  (apply 'append (mapcar 'list l1 l2)))
;;;
;;; (чередование '(a b c) '(1 2 3))
;;; (A 1 B 2 C 3)
;;; (чередование '(a b c d) '(1 2 3))
;;; (A 1 B 2 C 3)
;;; (чередование '(a b c) '(1 2 3 4))
;;; (A 1 B 2 C 3)

;;;		
;;; Задание 9
;;; Соболев
;;; Разбить список на два списка: 1 - чётные числа, 2 - нечётные числа.
;;;	
(defun чет/нечет (lst &optional even odd)
  (cond ((null lst) (list (reverse even) (reverse odd)))
        ((evenp (car lst)) (чет/нечет (cdr lst) (cons (car lst) even) odd))
        (t (чет/нечет (cdr lst) even (cons (car lst) odd)))))
;;;
;;; (чет/нечет '(1 2 3 4 5 6 7 8 9))
;;; ((2 4 6 8) (1 3 5 7 9))
;;;
;;; (чет/нечет '(75 19 26 1 4 662 59 2 48 3 8 4 4 94))
;;; ((26 4 662 2 48 8 4 4 94) (75 19 1 59 3))
;;;

;;;
;;; Задание 9
;;; Соболев
;;; Разбить список на два списка: 1 - чётные числа, 2 - нечётные числа.
;;;
(defun чет/нечет (lst &optional even odd &aux (a (car lst)) (z (cdr lst)))
  (cond ((null lst) (list (reverse even) (reverse odd)))
        ((evenp a) (чет/нечет z (cons a even) odd))
        (t (чет/нечет z even (cons a odd)))))
;;;
;;; (чет/нечет '(1 2 3 4 5 6 7 8 9))
;;; ((2 4 6 8) (1 3 5 7 9))
;;;
;;; (чет/нечет '(75 19 26 1 4 662 59 2 48 3 8 4 4 94))
;;; ((26 4 662 2 48 8 4 4 94) (75 19 1 59 3))
;;;

;;;====================================================================================================

;;;
;;; Задание 12
;;; Соболев
;;; Заменить два подряд идущих одинаковых элемента одним.
;;;	
(defun ДваПодряд (lst)
  (cond ((null lst) nil)
        ((equal (car lst) (cadr lst)) (cons (car lst) (ДваПодряд (cddr lst))))
        ((cons (car lst) (ДваПодряд (cdr lst))))))
;;;
;;; (ДваПодряд '(1 1 1 2 2 3 4 4 4 4 5 6 7))
;;;	(1 1 2 3 4 4 5 6 7)
;;;
;;; (ДваПодряд '(1 1 1 1 1 2 2 2 2 3 3 3 4 4 5))
;;; (1 1 1 2 2 3 3 4 5)
;;;	

;;;
;;; Задание 12
;;; Соболев
;;; Заменить два подряд идущих одинаковых элемента одним.
;;;	
(defun ДваПодряд (lst &aux (a (car lst)) (z (cdr lst))  )
  (cond ((null lst) nil)
        ((equal a (car z)) (cons a (ДваПодряд (cdr z))))
        ((cons a (ДваПодряд z)))))
;;;
;;; (ДваПодряд '(1 1 1 2 2 3 4 4 4 4 5 6 7))
;;;	(1 1 2 3 4 4 5 6 7)
;;;
;;; (ДваПодряд '(1 1 1 1 1 2 2 2 2 3 3 3 4 4 5))
;;; (1 1 1 2 2 3 3 4 5)
;;;	

;;;		
;;; Задание 12
;;; Соболев
;;; Заменить два подряд идущих одинаковых элемента одним.
;;;			
(defun ДваПодряд (lst)
  (when lst
        (if (equal (car lst) (cadr lst))
            (cons (car lst) (ДваПодряд (cddr lst)))
          (cons (car lst) (ДваПодряд (cdr lst))))))
;;;
;;; (ДваПодряд '(1 1 1 2 2 3 4 4 4 4 5 6 7))
;;;	(1 1 2 3 4 4 5 6 7)
;;;
;;; (ДваПодряд '(1 1 1 1 1 2 2 2 2 3 3 3 4 4 5))
;;; (1 1 1 2 2 3 3 4 5)
;;;	

;;;		
;;; Задание 12
;;; Соболев
;;; Заменить два подряд идущих одинаковых элемента одним.
;;;			
(defun ДваПодряд (lst &aux (a (car lst)) (z (cdr lst))  )
  (when lst
        (if (equal a (car z))
            (cons a (ДваПодряд (cdr z)))
          (cons a (ДваПодряд z)))))
;;;
;;; (ДваПодряд '(1 1 1 2 2 3 4 4 4 4 5 6 7))
;;;	(1 1 2 3 4 4 5 6 7)
;;;
;;; (ДваПодряд '(1 1 1 1 1 2 2 2 2 3 3 3 4 4 5))
;;; (1 1 1 2 2 3 3 4 5)
;;;	

;;;====================================================================================================

;;;		
;;; Задание 21
;;; Соболев
;;; Удалить из списка первое вхождение данного элемента.
;;;				
(defun удаление (a b &aux (f (car b)) (l (cdr b)))
  (cond ((null b) nil)
        ((eql a f) l)
        ((cons f (удаление a l)))))
;;;
;;; (удаление 'a '(a (b c) d (e f) g))
;;; ((B C) D (E F) G)
;;;
;;; (удаление '1 '(1 1 2 (3 3) 1 (5 8) 4))
;;; (1 2 (3 3) 1 (5 8) 4)
;;;

;;;		
;;; Задание 21
;;; Соболев
;;; Удалить из списка первое вхождение данного элемента.
;;;		
(defun удаление (a b)
  (cond ((null b) nil)
        ((eql a (car b)) (cdr b))
        ((cons (car b) (удаление a (cdr b))))))
;;;
;;; (удаление 'a '(a (b c) d (e f) g))
;;; ((B C) D (E F) G)
;;;
;;; (удаление '1 '(1 1 2 (3 3) 1 (5 8) 4))
;;; (1 2 (3 3) 1 (5 8) 4)
;;;

;;;====================================================================================================

;;;		
;;; Задание 27
;;; Соболев
;;; Определить функцию, которая чередовала бы элементы списков.
;;;
(defun чередование (x y &aux (f (car x)) (l (cdr x)))
  (cond ((null x) nil)
   (t (cons f (чередование y l)))))
;;;
;;; (чередование '(1 2 3 4) '(a b c d))
;;; (1 A 2 B 3 C 4 D)
;;;
;;; (чередование '(1 2 3 4 5) '(а б в г д е ё ж з))
;;; (1 а 2 б 3 в 4 г 5 д)
;;;

;;;		
;;; Задание 27
;;; Соболев
;;; Определить функцию, которая чередовала бы элементы списков.
;;;
(defun чередование (x y)
  (cond ((null x) nil)
   (t (cons (car x) (чередование y (cdr x))))))
;;;
;;; 
;;; (1 A 2 B 3 C 4 D)
;;;
;;; (чередование '(1 2 3 4 5) '(а б в г д е ё ж з))
;;; (1 а 2 б 3 в 4 г 5 д)
;;;

;;;====================================================================================================

;;;		
;;; Задание 47
;;; 
;;; Определить функцию, которая удаляет все свойства символа.
;;;
(defun ДобавитьСвойства (lst)
  (cond ( (setf (get lst 'Вес) '(1900 kg))
          (setf (get lst 'Цвет) '(Красный))
          (setf (get lst 'Кузов) '(Седан))
          (setf (get lst 'Год) '(2010))
          (symbol-plist lst))))

(defun ОчиститьВсе (lst &aux (k (car (symbol-plist lst))))
  (cond ((null lst) nil)
        ((remprop lst k) (ОчиститьВсе lst))))

(defun Свойства (lst &aux (a (symbol-plist lst)))
  (cond ((null lst) nil)
        (a)))
;;;
;;; (ДобавитьСвойства 'avto)
;;; (Год (2010) Кузов (Седан) Цвет (Красный) Вес (1900 KG))
;;; (Свойства 'avto)
;;; (Год (2010) Кузов (Седан) Цвет (Красный) Вес (1900 KG))
;;; (ОчиститьВсе 'avto)
;;; NIL
;;; (Свойства 'avto)
;;; NIL
;;;
